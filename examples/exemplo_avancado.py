#!/usr/bin/env python3
"""
Exemplo avan√ßado de uso da ferramenta de transcri√ß√£o
Demonstra uso program√°tico com configura√ß√µes customizadas
"""

import os
import sys
import logging
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente do arquivo .env
load_dotenv()

# Adiciona o diret√≥rio src ao path para importa√ß√£o
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from audio_transcriber import AudioTranscriber

def configurar_logging():
    """Configura logging customizado"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f'transcricao_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
            logging.StreamHandler()
        ]
    )

def exemplo_avancado():
    """Exemplo com uso mais avan√ßado da ferramenta"""
    
    print("üéµ Audio Transcriber - Exemplo Avan√ßado")
    print("=" * 45)
    
    # Configura logging
    configurar_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # Configura√ß√µes (agora v√™m do arquivo .env)
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ö†Ô∏è  Configure OPENAI_API_KEY no arquivo .env antes de continuar")
            print("üí° Copie .env.example para .env e configure suas credenciais")
            return
        
        # Cria o transcriber com configura√ß√µes customizadas
        transcriber = AudioTranscriber(
            # Configura√ß√µes opcionais podem sobrescrever as do .env
            max_file_size_mb=30,  # Exemplo: arquivo maior que o padr√£o
            api_delay=1.0,        # Exemplo: pausa maior entre requisi√ß√µes
            save_logs=True        # Salva logs em arquivo
        )
        
        # Define pastas
        pasta_audios = "./audios"
        pasta_saida = "./output"
        
        # Cria pastas se n√£o existirem
        Path(pasta_audios).mkdir(exist_ok=True)
        Path(pasta_saida).mkdir(exist_ok=True)
        
        # Verifica se h√° arquivos
        audio_files = transcriber.find_audio_files(pasta_audios)
        if not audio_files:
            print(f"‚ùå Nenhum arquivo de √°udio encontrado em {pasta_audios}")
            print("Coloque alguns arquivos de √°udio na pasta e tente novamente.")
            return
        
        print(f"üìÅ Encontrados {len(audio_files)} arquivos de √°udio")
        
        # Lista os arquivos encontrados
        print("\nüìã Arquivos que ser√£o processados:")
        for i, file_path in enumerate(audio_files, 1):
            file_info = transcriber.get_file_info(file_path)
            print(f"  {i:2d}. {file_info['nome_arquivo']} ({file_info['tamanho_mb']} MB)")
        
        # Confirma processamento
        resposta = input("\nü§î Continuar com a transcri√ß√£o? (s/N): ").strip().lower()
        if resposta not in ['s', 'sim', 'y', 'yes']:
            print("‚èπÔ∏è  Processamento cancelado")
            return
        
        # Nome do arquivo de sa√≠da
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_file = Path(pasta_saida) / f"transcricoes_avancado_{timestamp}.xlsx"
        
        # Processa com medi√ß√£o de tempo
        inicio = datetime.now()
        print(f"\nüöÄ Iniciando processamento √†s {inicio.strftime('%H:%M:%S')}")
        
        excel_file = transcriber.process_folder(pasta_audios, str(output_file))
        
        fim = datetime.now()
        duracao = fim - inicio
        
        # Relat√≥rio final
        print(f"\nüéâ Processamento conclu√≠do!")
        print(f"‚è±Ô∏è  Tempo total: {duracao}")
        print(f"üìä Planilha Excel: {excel_file}")
        
        # Estat√≠sticas dos resultados
        if transcriber.results:
            sucessos = len([r for r in transcriber.results if r['sucesso'] == 'Sim'])
            falhas = len(transcriber.results) - sucessos
            taxa_sucesso = (sucessos / len(transcriber.results)) * 100
            
            print(f"\nüìà Estat√≠sticas:")
            print(f"   Sucessos: {sucessos}")
            print(f"   Falhas: {falhas}")
            print(f"   Taxa de sucesso: {taxa_sucesso:.1f}%")
            
            if falhas > 0:
                print(f"\n‚ùå Arquivos com falha:")
                for resultado in transcriber.results:
                    if resultado['sucesso'] == 'N√£o':
                        print(f"   - {resultado['nome_arquivo']}: {resultado['erro']}")
        
        logger.info("Processamento avan√ßado conclu√≠do com sucesso")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Processamento interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro no exemplo avan√ßado: {e}")
        print(f"‚ùå Erro: {e}")

def exemplo_processamento_lote():
    """Exemplo de processamento de m√∫ltiplas pastas"""
    
    print("\nüóÇÔ∏è  Exemplo: Processamento em Lote")
    print("=" * 40)
    
    pastas_audio = [
        "./audios/reuniao1",
        "./audios/reuniao2", 
        "./audios/entrevistas"
    ]
    
    try:
        transcriber = AudioTranscriber()
        
        for pasta in pastas_audio:
            if Path(pasta).exists():
                print(f"\nüìÅ Processando: {pasta}")
                
                nome_pasta = Path(pasta).name
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_file = f"transcricoes_{nome_pasta}_{timestamp}.xlsx"
                
                excel_file = transcriber.process_folder(pasta, output_file)
                print(f"‚úÖ Conclu√≠do: {excel_file}")
            else:
                print(f"‚ö†Ô∏è  Pasta n√£o encontrada: {pasta}")
                
    except Exception as e:
        print(f"‚ùå Erro no processamento em lote: {e}")

if __name__ == "__main__":
    exemplo_avancado()
    
    # Pergunta se quer executar exemplo de lote
    resposta = input("\nü§î Executar exemplo de processamento em lote? (s/N): ").strip().lower()
    if resposta in ['s', 'sim', 'y', 'yes']:
        exemplo_processamento_lote()
