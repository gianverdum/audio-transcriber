"""
API FastAPI para Audio Transcriber
Fornece endpoints REST para transcri√ß√£o de √°udios
"""

import tempfile
import uuid
from datetime import datetime
from typing import List, Optional
from pathlib import Path

from fastapi import FastAPI, File, Form, HTTPException, UploadFile, status  # type: ignore[import]
from fastapi.responses import Response, JSONResponse  # type: ignore[import]
from fastapi.middleware.cors import CORSMiddleware  # type: ignore[import]
import uvicorn  # type: ignore[import]

from .models import (
    TranscriptionRequest,
    TranscriptionResponse,
    BatchTranscriptionRequest,
    BatchTranscriptionResponse,
    HealthResponse,
    ErrorResponse
)
from .service import TranscriptionService
from ..core import AudioTranscriber

# Cria inst√¢ncia da aplica√ß√£o
app = FastAPI(
    title="Audio Transcriber API",
    description="""
    ## üéµ API para Transcri√ß√£o de √Åudios usando OpenAI Whisper
    
    Esta API permite transcrever arquivos de √°udio em texto usando o modelo Whisper da OpenAI.
    
    ### üìã Formatos Suportados
    - **√Åudio**: mp3, mp4, mpeg, mpga, m4a, wav, webm, ogg, flac
    - **Sa√≠da**: json, txt, xlsx, csv
    
    ### üåç Idiomas Suportados (ISO-639-1)
    - `pt` - Portugu√™s
    - `en` - Ingl√™s
    - `es` - Espanhol
    - `fr` - Franc√™s
    - `de` - Alem√£o
    - `it` - Italiano
    - `ja` - Japon√™s
    - `ko` - Coreano
    - `zh` - Chin√™s
    - `ru` - Russo
    - E muitos outros...
    
    ### üìè Limites
    - **Tamanho m√°ximo**: 25MB por arquivo
    - **Timeout**: 30 segundos por arquivo
    
    ### üöÄ Endpoints Dispon√≠veis
    - `/transcribe` - Transcri√ß√£o de arquivo √∫nico (resposta JSON)
    - `/transcribe/batch` - Transcri√ß√£o de m√∫ltiplos arquivos
    - `/transcribe/download` - Transcri√ß√£o com download direto do resultado
    - `/languages` - Lista de idiomas suportados
    - `/health` - Verifica√ß√£o de sa√∫de da API
    
    ### ‚ö†Ô∏è C√≥digos de Erro Comuns
    - **400**: Arquivo inv√°lido, formato n√£o suportado, ou par√¢metros incorretos
    - **413**: Arquivo muito grande (> 25MB)
    - **422**: Dados de entrada mal formatados
    - **503**: Servi√ßo temporariamente indispon√≠vel
    - **500**: Erro interno do servidor
    
    ### üí° Dicas de Uso
    1. **Idioma**: Use c√≥digos ISO-639-1 de 2 letras (ex: 'pt', n√£o 'pt-BR')
    2. **Qualidade**: √Åudios com boa qualidade geram melhores transcri√ß√µes
    3. **Formato**: MP3 e WAV s√£o os formatos mais confi√°veis
    4. **Timeout**: Arquivos grandes podem levar mais tempo para processar
    
    ### üìñ Documenta√ß√£o
    - Swagger UI (/docs) - Interface interativa
    - ReDoc (/redoc) - Documenta√ß√£o detalhada
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    contact={
        "name": "Audio Transcriber API",
        "url": "http://localhost:8000/health",
    },
    license_info={
        "name": "MIT",
    },
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inst√¢ncia global do servi√ßo
transcription_service = None


@app.on_event("startup")
async def startup_event():
    """Inicializa servi√ßos na startup"""
    global transcription_service
    try:
        transcription_service = TranscriptionService()
    except Exception as e:
        print(f"Erro ao inicializar servi√ßo de transcri√ß√£o: {e}")


@app.get("/", response_model=dict)
async def root():
    """Endpoint raiz"""
    return {
        "message": "Audio Transcriber API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }


@app.get("/health", 
         response_model=HealthResponse,
         summary="Verifica√ß√£o de sa√∫de da API",
         description="Verifica o status da API e suas depend√™ncias")
async def health_check():
    """
    ## Verifica√ß√£o de sa√∫de da API
    
    Endpoint para monitoramento que verifica se a API est√° funcionando corretamente.
    
    ### Exemplo de resposta saud√°vel:
    ```json
    {
        "status": "healthy",
        "version": "1.0.0",
        "timestamp": "2025-08-19T15:30:00.123456",
        "openai_api_available": true,
        "supported_formats": [".mp3", ".wav", ".ogg", ".m4a", ".flac"],
        "max_file_size_mb": 25
    }
    ```
    
    ### Status poss√≠veis:
    - **healthy**: API funcionando normalmente
    - **unhealthy**: Problemas detectados (ex: API OpenAI indispon√≠vel)
    
    ### C√≥digos de resposta:
    - **200**: Verifica√ß√£o realizada (status pode ser healthy ou unhealthy)
    """
    try:
        # Testa se pode criar inst√¢ncia do transcriber
        test_transcriber = AudioTranscriber()
        openai_available = test_transcriber.client is not None
        
        return HealthResponse(
            status="healthy",
            version="1.0.0",
            timestamp=datetime.now(),
            openai_api_available=openai_available,
            supported_formats=list(AudioTranscriber.SUPPORTED_FORMATS),
            max_file_size_mb=25
        )
    except Exception as e:
        return HealthResponse(
            status="unhealthy",
            version="1.0.0",
            timestamp=datetime.now(),
            openai_api_available=False,
            supported_formats=list(AudioTranscriber.SUPPORTED_FORMATS),
            max_file_size_mb=25
        )


@app.get("/languages",
         summary="Listar idiomas suportados",
         description="Lista todos os c√≥digos de idioma aceitos pela API")
async def get_supported_languages():
    """
    ## Lista de idiomas suportados
    
    Retorna todos os c√≥digos de idioma ISO-639-1 aceitos pela API Whisper da OpenAI.
    
    ### Exemplo de resposta:
    ```json
    {
        "supported_languages": {
            "pt": "Portugu√™s",
            "en": "English",
            "es": "Espa√±ol"
        },
        "total_languages": 97,
        "note": "Use os c√≥digos de 2 letras (ex: 'pt') no par√¢metro language"
    }
    ```
    """
    # Lista de idiomas suportados pelo Whisper (principais)
    languages = {
        "pt": "Portugu√™s",
        "en": "English", 
        "es": "Espa√±ol",
        "fr": "Fran√ßais",
        "de": "Deutsch",
        "it": "Italiano",
        "ja": "Êó•Êú¨Ë™û",
        "ko": "ÌïúÍµ≠Ïñ¥",
        "zh": "‰∏≠Êñá",
        "ru": "–†—É—Å—Å–∫–∏–π",
        "ar": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
        "hi": "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
        "th": "‡πÑ‡∏ó‡∏¢",
        "vi": "Ti·∫øng Vi·ªát",
        "nl": "Nederlands",
        "pl": "Polski",
        "tr": "T√ºrk√ße",
        "sv": "Svenska",
        "da": "Dansk",
        "no": "Norsk",
        "fi": "Suomi",
        "cs": "ƒåe≈°tina",
        "sk": "Slovenƒçina",
        "hu": "Magyar",
        "ro": "Rom√¢nƒÉ",
        "bg": "–ë—ä–ª–≥–∞—Ä—Å–∫–∏",
        "hr": "Hrvatski",
        "sl": "Sloven≈°ƒçina",
        "et": "Eesti",
        "lv": "Latvie≈°u",
        "lt": "Lietuvi≈≥",
        "ca": "Catal√†",
        "eu": "Euskera",
        "gl": "Galego",
        "is": "√çslenska",
        "mt": "Malti",
        "cy": "Cymraeg",
        "ga": "Gaeilge",
        "mk": "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏",
        "sq": "Shqip",
        "sr": "–°—Ä–ø—Å–∫–∏",
        "bs": "Bosanski",
        "be": "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è",
        "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "el": "ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨",
        "he": "◊¢◊ë◊®◊ô◊™",
        "fa": "ŸÅÿßÿ±ÿ≥€å",
        "ur": "ÿßÿ±ÿØŸà",
        "bn": "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
        "ta": "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
        "te": "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å",
        "kn": "‡≤ï‡≤®‡≥ç‡≤®‡≤°",
        "ml": "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç",
        "gu": "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä",
        "mr": "‡§Æ‡§∞‡§æ‡§†‡•Ä",
        "ne": "‡§®‡•á‡§™‡§æ‡§≤‡•Ä",
        "si": "‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω",
        "my": "·Äô·Äº·Äî·Ä∫·Äô·Ä¨",
        "km": "·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö",
        "lo": "‡∫•‡∫≤‡∫ß",
        "ka": "·É•·Éê·É†·Éó·É£·Éö·Éò",
        "am": "·ä†·àõ·à≠·äõ",
        "az": "Az…ôrbaycan",
        "kk": "“ö–∞–∑–∞“õ",
        "ky": "–ö—ã—Ä–≥—ã–∑",
        "uz": "O ªzbek",
        "tg": "–¢–æ“∑–∏–∫”£",
        "mn": "–ú–æ–Ω–≥–æ–ª",
        "yo": "Yor√πb√°",
        "zu": "isiZulu",
        "af": "Afrikaans",
        "sw": "Kiswahili",
        "ha": "Hausa",
        "ig": "Igbo",
        "so": "Soomaali",
        "mg": "Malagasy",
        "eo": "Esperanto",
        "mi": "Te Reo MƒÅori",
        "ms": "Bahasa Melayu",
        "id": "Bahasa Indonesia",
        "tl": "Filipino"
    }
    
    return {
        "supported_languages": languages,
        "total_languages": len(languages),
        "note": "Use os c√≥digos de 2 letras (ex: 'pt') no par√¢metro language",
        "format": "ISO-639-1",
        "examples": {
            "portuguese": "pt",
            "english": "en", 
            "spanish": "es",
            "french": "fr",
            "german": "de"
        }
    }


@app.post("/transcribe", 
          response_model=TranscriptionResponse,
          summary="Transcrever arquivo √∫nico",
          description="Transcreve um √∫nico arquivo de √°udio e retorna o resultado em JSON")
async def transcribe_audio(
    file: UploadFile = File(description="Arquivo de √°udio para transcrever"),
    output_format: str = Form(
        default="json", 
        description="Formato de sa√≠da: json, txt, xlsx, csv"
    ),
    max_file_size_mb: Optional[int] = Form(
        default=25, 
        description="Tamanho m√°ximo do arquivo em MB (1-100)",
        ge=1, le=100
    ),
    language: Optional[str] = Form(
        default=None, 
        description="Idioma do √°udio em formato ISO-639-1 (ex: 'pt', 'en', 'es')"
    ),
):
    """
    ## Transcreve um √∫nico arquivo de √°udio
    
    Realiza a transcri√ß√£o de um arquivo de √°udio usando o modelo Whisper da OpenAI.
    
    ### Exemplo de uso com cURL:
    ```bash
    curl -X POST "http://localhost:8000/transcribe" \
         -H "Content-Type: multipart/form-data" \
         -F "file=@audio.mp3" \
         -F "output_format=json" \
         -F "language=pt"
    ```
    
    ### Exemplo de resposta:
    ```json
    {
        "success": true,
        "transcription": "Ol√°, este √© um exemplo de transcri√ß√£o.",
        "filename": "audio.mp3",
        "file_size_mb": 2.5,
        "processing_time_seconds": 1.5,
        "timestamp": "2025-08-19T15:30:00",
        "model_used": "whisper-1",
        "output_format": "json",
        "error": null
    }
    ```
    
    ### C√≥digos de resposta:
    - **200**: Transcri√ß√£o realizada com sucesso
    - **400**: Arquivo inv√°lido ou par√¢metros incorretos
    - **413**: Arquivo muito grande
    - **500**: Erro interno do servidor
    """
    if not transcription_service:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Servi√ßo de transcri√ß√£o n√£o dispon√≠vel"
        )
    
    # Valida√ß√µes
    if not file.filename:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nome do arquivo √© obrigat√≥rio"
        )
    
    file_extension = Path(file.filename).suffix.lower()
    if file_extension not in AudioTranscriber.SUPPORTED_FORMATS:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Formato n√£o suportado. Formatos aceitos: {', '.join(AudioTranscriber.SUPPORTED_FORMATS)}"
        )
    
    # L√™ conte√∫do do arquivo
    try:
        file_content = await file.read()
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Erro ao ler arquivo: {str(e)}"
        )
    
    # Verifica tamanho
    file_size_mb = len(file_content) / (1024 * 1024)
    if file_size_mb > max_file_size_mb:
        raise HTTPException(
            status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
            detail=f"Arquivo muito grande. M√°ximo: {max_file_size_mb}MB"
        )
    
    # Processa transcri√ß√£o
    try:
        result = await transcription_service.transcribe_single_file(
            file_content=file_content,
            filename=file.filename,
            output_format=output_format,
            language=language
        )
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro na transcri√ß√£o: {str(e)}"
        )


@app.post("/transcribe/batch", 
          response_model=BatchTranscriptionResponse,
          summary="Transcrever m√∫ltiplos arquivos",
          description="Transcreve m√∫ltiplos arquivos de √°udio em lote")
async def transcribe_batch(
    files: List[UploadFile] = File(description="Lista de arquivos de √°udio para transcrever"),
    output_format: str = Form(
        default="xlsx", 
        description="Formato de sa√≠da: json, txt, xlsx, csv"
    ),
    max_file_size_mb: Optional[int] = Form(
        default=25, 
        description="Tamanho m√°ximo por arquivo em MB (1-100)",
        ge=1, le=100
    ),
    language: Optional[str] = Form(
        default=None, 
        description="Idioma dos √°udios em formato ISO-639-1 (ex: 'pt', 'en', 'es')"
    ),
):
    """
    ## Transcreve m√∫ltiplos arquivos de √°udio em lote
    
    Processa v√°rios arquivos de √°udio simultaneamente e retorna os resultados consolidados.
    
    ### Exemplo de uso com cURL:
    ```bash
    curl -X POST "http://localhost:8000/transcribe/batch" \
         -H "Content-Type: multipart/form-data" \
         -F "files=@audio1.mp3" \
         -F "files=@audio2.wav" \
         -F "output_format=xlsx" \
         -F "language=pt"
    ```
    
    ### Exemplo de resposta:
    ```json
    {
        "success": true,
        "total_files": 2,
        "successful_transcriptions": 2,
        "failed_transcriptions": 0,
        "results": [
            {
                "success": true,
                "transcription": "Primeira transcri√ß√£o...",
                "filename": "audio1.mp3",
                "file_size_mb": 1.2,
                "processing_time_seconds": 0.8,
                "timestamp": "2025-08-19T15:30:00",
                "model_used": "whisper-1",
                "output_format": "xlsx",
                "error": null
            }
        ],
        "processing_time_seconds": 2.1,
        "timestamp": "2025-08-19T15:30:00",
        "output_format": "xlsx"
    }
    ```
    
    ### C√≥digos de resposta:
    - **200**: Processamento conclu√≠do (pode haver falhas individuais)
    - **400**: Nenhum arquivo v√°lido fornecido
    - **500**: Erro interno do servidor
    """
    if not transcription_service:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Servi√ßo de transcri√ß√£o n√£o dispon√≠vel"
        )
    
    if not files:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Pelo menos um arquivo √© obrigat√≥rio"
        )
    
    # Valida e processa arquivos
    file_data = []
    for file in files:
        if not file.filename:
            continue
        
        file_extension = Path(file.filename).suffix.lower()
        if file_extension not in AudioTranscriber.SUPPORTED_FORMATS:
            continue
        
        try:
            content = await file.read()
            file_size_mb = len(content) / (1024 * 1024)
            
            if file_size_mb <= max_file_size_mb:
                file_data.append((content, file.filename))
        except Exception:
            continue
    
    if not file_data:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nenhum arquivo v√°lido para processar"
        )
    
    # Processa lote
    try:
        result = await transcription_service.transcribe_batch(
            files=file_data,
            output_format=output_format,
            language=language
        )
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro no processamento em lote: {str(e)}"
        )


@app.post("/transcribe/download",
          summary="Transcrever e baixar resultado",
          description="Transcreve arquivos e retorna o resultado para download direto")
async def transcribe_and_download(
    files: List[UploadFile] = File(description="Arquivo(s) de √°udio para transcrever"),
    output_format: str = Form(
        default="xlsx",
        description="Formato do arquivo de sa√≠da: json, txt, xlsx, csv"
    ),
    max_file_size_mb: Optional[int] = Form(
        default=25,
        description="Tamanho m√°ximo por arquivo em MB (1-100)",
        ge=1, le=100
    ),
    language: Optional[str] = Form(
        default=None,
        description="Idioma dos √°udios em formato ISO-639-1 (ex: 'pt', 'en', 'es')"
    ),
):
    """
    ## Transcreve arquivos e retorna resultado para download
    
    Processa um ou m√∫ltiplos arquivos de √°udio e retorna o resultado formatado para download direto.
    
    ### Exemplo de uso com cURL:
    ```bash
    # Para arquivo √∫nico com sa√≠da Excel
    curl -X POST "http://localhost:8000/transcribe/download" \
         -H "Content-Type: multipart/form-data" \
         -F "files=@audio.mp3" \
         -F "output_format=xlsx" \
         -F "language=pt" \
         --output transcricao.xlsx
    
    # Para m√∫ltiplos arquivos com sa√≠da CSV
    curl -X POST "http://localhost:8000/transcribe/download" \
         -H "Content-Type: multipart/form-data" \
         -F "files=@audio1.mp3" \
         -F "files=@audio2.wav" \
         -F "output_format=csv" \
         -F "language=pt" \
         --output transcricoes.csv
    ```
    
    ### Formatos de resposta:
    - **xlsx**: Planilha Excel com dados estruturados
    - **csv**: Arquivo CSV com dados tabulares
    - **txt**: Arquivo de texto com transcri√ß√µes
    - **json**: Resposta JSON estruturada
    
    ### Headers de resposta:
    - `Content-Type`: Tipo MIME apropriado ao formato
    - `Content-Disposition`: Nome do arquivo para download
    
    ### C√≥digos de resposta:
    - **200**: Download pronto com dados da transcri√ß√£o
    - **400**: Arquivo inv√°lido ou par√¢metros incorretos
    - **413**: Arquivo muito grande
    - **500**: Erro interno do servidor
    """
    if not transcription_service:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Servi√ßo de transcri√ß√£o n√£o dispon√≠vel"
        )
    
    # Se apenas um arquivo, trata como single
    if len(files) == 1:
        file = files[0]
        file_content = await file.read()
        
        result = await transcription_service.transcribe_single_file(
            file_content=file_content,
            filename=file.filename,
            output_format=output_format,
            language=language
        )
    else:
        # M√∫ltiplos arquivos
        file_data = []
        for file in files:
            if file.filename:
                content = await file.read()
                file_data.append((content, file.filename))
        
        result = await transcription_service.transcribe_batch(
            files=file_data,
            output_format=output_format,
            language=language
        )
    
    # Formata sa√≠da
    try:
        formatted_output = transcription_service.format_output(result, output_format)
        
        if output_format == "json":
            return JSONResponse(content=formatted_output)
        
        elif output_format == "txt":
            return Response(
                content=formatted_output,
                media_type="text/plain",
                headers={"Content-Disposition": "attachment; filename=transcricao.txt"}
            )
        
        elif output_format in ["xlsx", "csv"]:
            media_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" if output_format == "xlsx" else "text/csv"
            filename = f"transcricao.{output_format}"
            
            return Response(
                content=formatted_output,
                media_type=media_type,
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
    
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao formatar sa√≠da: {str(e)}"
        )


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Handler global para exce√ß√µes"""
    error_response = ErrorResponse(
        error="InternalServerError",
        message="Erro interno do servidor",
        details=str(exc),
        timestamp=datetime.now(),
        request_id=str(uuid.uuid4())
    )
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content=error_response.model_dump(mode='json')
    )


# Fun√ß√£o para executar localmente
def run_local(host: str = "0.0.0.0", port: int = 8000, reload: bool = True):
    """Executa a API localmente"""
    uvicorn.run(
        "audio_transcriber.api.main:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )


if __name__ == "__main__":
    run_local()
